name: $(Version).$(rev:r)

variables:
- name: Version
  value: "1.0.0"

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - ".editorconfig"
    - ".gitignore"
    - "README.md"
    - "LICENSE"
    - "*.sln"
    - "**/*.csproj"

stages:
# Build Pipeline
- stage: Build
  jobs:
  - job: HostedVs2017
    displayName: Hosted VS2017
    pool:
      name: Hosted VS2017
    workspace:
      clean: all
    variables:
    - name: DotNetSdkVersion
      value: "2.1.701"
    - name: Configuration
      value: Release
    
    steps:
    - task: CmdLine@2
      displayName: "Install MounteBank"
      inputs:
        script: "npm install -g mountebank"
    - task: CmdLine@2
      displayName: "Install Azure Functions CLI"
      inputs:
        script: "npm install -g azure-functions-core-tools --unsafe-perm true"
    - task: DotNetCoreInstaller@0
      displayName: "Install .NET Core SDK"
      inputs:
        version: $(DotNetSdkVersion)
    - task: DotNetCoreCLI@2
      displayName: "Restore NuGet Packages"
      inputs:
        command: restore
        projects: "$(Build.SourcesDirectory)/*.sln"
    - task: DotNetCoreCLI@2
      displayName: "Build Function App"
      inputs:
        projects: "$(Build.SourcesDirectory)/*.sln"
        arguments: "-c $(Configuration)"
    - task: CmdLine@2
      displayName: "Run MounteBank"
      inputs:
        script: "start /b mb --noLogFile"
    - task: CmdLine@2
      displayName: "Run Function App"
      inputs:
        script: |
          cd $(Build.SourcesDirectory)\src\FunctionApp
          start /b func host start --csharp
      env:
        ExternalApi__BaseUri: http://localhost:8080/
        ExternalApi__Endpoints__HealthCheck: ping
    - task: CmdLine@2
      displayName: "Test Function App"
      inputs:
        script: 'dotnet test $(Build.SourcesDirectory)/test/**/*.csproj -c $(Configuration) --logger:trx --results-directory:$(System.DefaultWorkingDirectory)\TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(System.DefaultWorkingDirectory)\CoverageResults\coverage'
      env:
        Environment: Mountebank
    - task: PublishTestResults@2
      displayName: "Publish Test Results"
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: "$(System.DefaultWorkingDirectory)/TestResults/*.trx"
        mergeTestResults: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: "cobertura"
        summaryFileLocation: "$(System.DefaultWorkingDirectory)/CoverageResults/*.xml"
        failIfCoverageEmpty: false
